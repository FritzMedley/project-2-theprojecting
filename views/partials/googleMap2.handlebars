<style>
    #map {
      height: 400px;
      width: 500px;
    }
    #maps-location {
      width: 400px;
    }
</style>
<div id="map"></div>

<script type="text/javascript">
  var map;
  var service;
  var geocoder;

  function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: -34.397, lng: 150.644},
      zoom: 8
    });
    geocoder = new google.maps.Geocoder();

    service = new google.maps.places.PlacesService(map);

    var input = document.getElementById('maps-location');
    var info = document.getElementById("info-box");
    var searchBox = new google.maps.places.SearchBox(input);
    var infoBox = new google.maps.places.InfoBox(infoBox)
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
    map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
    });

    var markers = [];
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();

      if (places.length == 0) {
        return;
      }

      // Clear out the old markers.
      markers.forEach(function(marker) {
        marker.setMap(null);
      });
      markers = [];

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
        if (!place.geometry) {
          console.log("Returned place contains no geometry");
          return;
        }
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markers.push(new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location
        }));

        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      map.fitBounds(bounds);
    });
}

function MyClickHandler(map, service){
  this.map = map;
  this.service = service;
};
 
function searchCallback(results, status) {
  if (status == google.maps.places.PlacesServiceStatus.OK) {
    for (var i = 0; i < results.length; i++) {
      var place = results[i];
      createMarker(results[i]);
    }
  }
}


  
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB2X7T4HEj2LSuGNacjtQgrOnuSkaemMRA&callback=initMap&libraries=places"
    async defer></script>



  {{!--https://www.google.com/maps/embed/v1/MODE?key=YOUR_API_KEY&parameters
  Where:
api key = AIzaSyB2X7T4HEj2LSuGNacjtQgrOnuSkaemMRA
{MODE} is one of place, directions, search, view, or streetview.
{YOUR_API_KEY} is your free API key.
parameters include optional parameters, as well as mode-specific parameters.--}}

{{!--<iframe
  width="600"
  height="450"
  frameborder="0" style="border:0"
  src="https://www.google.com/maps/embed/v1/search?key=AIzaSyB2X7T4HEj2LSuGNacjtQgrOnuSkaemMRA
    &q=78653" allowfullscreen>
</iframe>--}}